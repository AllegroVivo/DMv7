from __future__ import annotations

from typing import TYPE_CHECKING, List, Optional, Type, TypeVar

from Components import DMTransform
from Core.Object import DMObject
from utils import *

if TYPE_CHECKING:
    from Core import DMGame, DMMonster
################################################################################

__all__ = ("DMRoom",)

R = TypeVar("R", bound="DMRoom")

################################################################################
class DMRoom(DMObject):

    __slots__ = (
        "_monsters",
    )

################################################################################
##### INITIALIZATION ###########################################################
################################################################################
    def __init__(
        self,
        state: DMGame,
        name: str,
        description: Optional[str] = None,
        rank: int = 0
    ):

        super().__init__(state, name, description, rank)

        self._monsters: List[DMMonster] = []

################################################################################
##### INTERNAL METHODS #########################################################
################################################################################

################################################################################
##### PROPERTIES ###############################################################
################################################################################
    @property
    def obj_type(self) -> DMObjectType:

        return DMObjectType.Room

################################################################################
    @property
    def monsters(self) -> List[DMMonster]:

        return self._monsters

################################################################################
##### IDENTIFICATION ###########################################################
################################################################################
    @staticmethod
    def is_room() -> bool:

        return True

################################################################################
##### PUBLIC METHODS ###########################################################
################################################################################
    def copy(self, **kwargs) -> DMRoom:

        new_obj: Type[R] = super().copy()  # type: ignore

        new_obj._monsters = []

        return new_obj

################################################################################
