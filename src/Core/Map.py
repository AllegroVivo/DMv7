from __future__ import annotations

from typing import TYPE_CHECKING, List, Optional

from Core.MapRow import DMMapRow

if TYPE_CHECKING:
    from Core import DMGame
################################################################################

__all__ = ("DMDungeonMap",)

################################################################################
class DMDungeonMap:

    __slots__ = (
        "_state",
        "_rows",
    )

################################################################################
##### INITIALIZATION ###########################################################
################################################################################
    def __init__(self, game: DMGame):

        self._state: DMGame = game
        self._rows: List[DMMapRow] = []

################################################################################
##### INTERNAL METHODS #########################################################
################################################################################
    def __getitem__(self, item: int) -> Optional[DMMapRow]:

        try:
            return self._rows[item]
        except IndexError:
            return

################################################################################
    def __len__(self) -> int:

        return len(self._rows)

################################################################################
##### PROPERTIES ###############################################################
################################################################################
    @property
    def game(self) -> DMGame:

        return self._state

################################################################################
